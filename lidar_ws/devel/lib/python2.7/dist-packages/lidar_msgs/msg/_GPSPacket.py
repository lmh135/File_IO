# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lidar_msgs/GPSPacket.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GPSPacket(genpy.Message):
  _md5sum = "a75c55dfb0f58e67e04612fa1aa9ed1e"
  _type = "lidar_msgs/GPSPacket"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[3] ned_xyz
float64[3] ned_uvw
float64 heading
uint8 gps_sats
uint8 gps_mod
uint64 timestamp
uint64 id_num
"""
  __slots__ = ['ned_xyz','ned_uvw','heading','gps_sats','gps_mod','timestamp','id_num']
  _slot_types = ['float64[3]','float64[3]','float64','uint8','uint8','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ned_xyz,ned_uvw,heading,gps_sats,gps_mod,timestamp,id_num

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPSPacket, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ned_xyz is None:
        self.ned_xyz = [0.] * 3
      if self.ned_uvw is None:
        self.ned_uvw = [0.] * 3
      if self.heading is None:
        self.heading = 0.
      if self.gps_sats is None:
        self.gps_sats = 0
      if self.gps_mod is None:
        self.gps_mod = 0
      if self.timestamp is None:
        self.timestamp = 0
      if self.id_num is None:
        self.id_num = 0
    else:
      self.ned_xyz = [0.] * 3
      self.ned_uvw = [0.] * 3
      self.heading = 0.
      self.gps_sats = 0
      self.gps_mod = 0
      self.timestamp = 0
      self.id_num = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.ned_xyz))
      buff.write(_get_struct_3d().pack(*self.ned_uvw))
      _x = self
      buff.write(_get_struct_d2B2Q().pack(_x.heading, _x.gps_sats, _x.gps_mod, _x.timestamp, _x.id_num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 24
      self.ned_xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.ned_uvw = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 26
      (_x.heading, _x.gps_sats, _x.gps_mod, _x.timestamp, _x.id_num,) = _get_struct_d2B2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.ned_xyz.tostring())
      buff.write(self.ned_uvw.tostring())
      _x = self
      buff.write(_get_struct_d2B2Q().pack(_x.heading, _x.gps_sats, _x.gps_mod, _x.timestamp, _x.id_num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 24
      self.ned_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.ned_uvw = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 26
      (_x.heading, _x.gps_sats, _x.gps_mod, _x.timestamp, _x.id_num,) = _get_struct_d2B2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2B2Q = None
def _get_struct_d2B2Q():
    global _struct_d2B2Q
    if _struct_d2B2Q is None:
        _struct_d2B2Q = struct.Struct("<d2B2Q")
    return _struct_d2B2Q
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
