// Generated by gencpp from file lidar_msgs/ImuPacket.msg
// DO NOT EDIT!


#ifndef LIDAR_MSGS_MESSAGE_IMUPACKET_H
#define LIDAR_MSGS_MESSAGE_IMUPACKET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_msgs
{
template <class ContainerAllocator>
struct ImuPacket_
{
  typedef ImuPacket_<ContainerAllocator> Type;

  ImuPacket_()
    : imu_gyro()
    , imu_accel()
    , imu_magn()
    , imu_euler()
    , timestamp(0)
    , id_num(0)  {
      imu_gyro.assign(0.0);

      imu_accel.assign(0.0);

      imu_magn.assign(0.0);

      imu_euler.assign(0.0);
  }
  ImuPacket_(const ContainerAllocator& _alloc)
    : imu_gyro()
    , imu_accel()
    , imu_magn()
    , imu_euler()
    , timestamp(0)
    , id_num(0)  {
  (void)_alloc;
      imu_gyro.assign(0.0);

      imu_accel.assign(0.0);

      imu_magn.assign(0.0);

      imu_euler.assign(0.0);
  }



   typedef boost::array<float, 3>  _imu_gyro_type;
  _imu_gyro_type imu_gyro;

   typedef boost::array<float, 3>  _imu_accel_type;
  _imu_accel_type imu_accel;

   typedef boost::array<float, 3>  _imu_magn_type;
  _imu_magn_type imu_magn;

   typedef boost::array<float, 3>  _imu_euler_type;
  _imu_euler_type imu_euler;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _id_num_type;
  _id_num_type id_num;





  typedef boost::shared_ptr< ::lidar_msgs::ImuPacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_msgs::ImuPacket_<ContainerAllocator> const> ConstPtr;

}; // struct ImuPacket_

typedef ::lidar_msgs::ImuPacket_<std::allocator<void> > ImuPacket;

typedef boost::shared_ptr< ::lidar_msgs::ImuPacket > ImuPacketPtr;
typedef boost::shared_ptr< ::lidar_msgs::ImuPacket const> ImuPacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_msgs::ImuPacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_msgs::ImuPacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lidar_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lidar_msgs': ['/home/longmen/lidar_ws/src/lidar_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_msgs::ImuPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_msgs::ImuPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_msgs::ImuPacket_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8ec3aca7e5b627e23bc444ef30e8bcd";
  }

  static const char* value(const ::lidar_msgs::ImuPacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8ec3aca7e5b627eULL;
  static const uint64_t static_value2 = 0x23bc444ef30e8bcdULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_msgs/ImuPacket";
  }

  static const char* value(const ::lidar_msgs::ImuPacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] imu_gyro\n\
float32[3] imu_accel\n\
float32[3] imu_magn\n\
float32[3] imu_euler\n\
uint64 timestamp\n\
uint64 id_num\n\
";
  }

  static const char* value(const ::lidar_msgs::ImuPacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_gyro);
      stream.next(m.imu_accel);
      stream.next(m.imu_magn);
      stream.next(m.imu_euler);
      stream.next(m.timestamp);
      stream.next(m.id_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuPacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_msgs::ImuPacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_msgs::ImuPacket_<ContainerAllocator>& v)
  {
    s << indent << "imu_gyro[]" << std::endl;
    for (size_t i = 0; i < v.imu_gyro.size(); ++i)
    {
      s << indent << "  imu_gyro[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imu_gyro[i]);
    }
    s << indent << "imu_accel[]" << std::endl;
    for (size_t i = 0; i < v.imu_accel.size(); ++i)
    {
      s << indent << "  imu_accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imu_accel[i]);
    }
    s << indent << "imu_magn[]" << std::endl;
    for (size_t i = 0; i < v.imu_magn.size(); ++i)
    {
      s << indent << "  imu_magn[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imu_magn[i]);
    }
    s << indent << "imu_euler[]" << std::endl;
    for (size_t i = 0; i < v.imu_euler.size(); ++i)
    {
      s << indent << "  imu_euler[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imu_euler[i]);
    }
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id_num: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_MSGS_MESSAGE_IMUPACKET_H
